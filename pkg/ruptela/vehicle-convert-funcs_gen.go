// Code generated by github.com/DIMO-Network/model-garage.
package ruptela

// This file is automatically populated with conversion functions for each field of the model struct.
// any conversion functions already defined in this package will be coppied through.
// note: DO NOT mutate the orginalDoc parameter which is shared between all conversion functions.

// ToChassisAxleRow1WheelLeftTirePressure0 converts data from field 'signals.960' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure0(originalDoc []byte, val string) (float64, error) {
	return Convert960(val)
}

// ToChassisAxleRow1WheelRightTirePressure0 converts data from field 'signals.961' of type string to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure0(originalDoc []byte, val string) (float64, error) {
	return Convert961(val)
}

// ToChassisAxleRow2WheelLeftTirePressure0 converts data from field 'signals.962' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure0(originalDoc []byte, val string) (float64, error) {
	return Convert962(val)
}

// ToChassisAxleRow2WheelRightTirePressure0 converts data from field 'signals.963' of type string to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure0(originalDoc []byte, val string) (float64, error) {
	return Convert963(val)
}

// ToCurrentLocationAltitude0 converts data from field 'pos.alt' of type float64 to 'Vehicle.CurrentLocation.Altitude' of type float64.
// Vehicle.CurrentLocation.Altitude: Current altitude relative to WGS 84 reference ellipsoid, as measured at the position of GNSS receiver antenna.
// Unit: 'm'
func ToCurrentLocationAltitude0(originalDoc []byte, val float64) (float64, error) {
	if val == 0x8000 {
		return 0, errNotFound
	}
	return val / 10, nil
}

// ToCurrentLocationLatitude0 converts data from field 'pos.lat' of type float64 to 'Vehicle.CurrentLocation.Latitude' of type float64.
// Vehicle.CurrentLocation.Latitude: Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
// Unit: 'degrees' Min: '-90' Max: '90'
func ToCurrentLocationLatitude0(originalDoc []byte, val float64) (float64, error) {
	if val == -0x80000000 {
		return 0, errNotFound
	}
	return val / 10000000, nil
}

// ToCurrentLocationLongitude0 converts data from field 'pos.lon' of type float64 to 'Vehicle.CurrentLocation.Longitude' of type float64.
// Vehicle.CurrentLocation.Longitude: Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
// Unit: 'degrees' Min: '-180' Max: '180'
func ToCurrentLocationLongitude0(originalDoc []byte, val float64) (float64, error) {
	if val == -0x80000000 {
		return 0, errNotFound
	}
	return val / 10000000, nil
}

// ToDIMOAftermarketHDOP0 converts data from field 'pos.hdop' of type float64 to 'Vehicle.DIMO.Aftermarket.HDOP' of type float64.
// Vehicle.DIMO.Aftermarket.HDOP: Horizontal dilution of precision of GPS
func ToDIMOAftermarketHDOP0(originalDoc []byte, val float64) (float64, error) {
	if val == 0xff {
		return 0, errNotFound
	}
	return val, nil
}

// ToDIMOAftermarketNSAT0 converts data from field 'pos.sat' of type float64 to 'Vehicle.DIMO.Aftermarket.NSAT' of type float64.
// Vehicle.DIMO.Aftermarket.NSAT: Number of sync satellites for GPS
func ToDIMOAftermarketNSAT0(originalDoc []byte, val float64) (float64, error) {
	if val == 0xff {
		return 0, errNotFound
	}
	return val, nil
}

// ToExteriorAirTemperature0 converts data from field 'signals.97' of type string to 'Vehicle.Exterior.AirTemperature' of type float64.
// Vehicle.Exterior.AirTemperature: Air temperature outside the vehicle.
// Unit: 'celsius'
func ToExteriorAirTemperature0(originalDoc []byte, val string) (float64, error) {
	return Convert97(val)
}

// ToLowVoltageBatteryCurrentVoltage0 converts data from field 'signals.29' of type string to 'Vehicle.LowVoltageBattery.CurrentVoltage' of type float64.
// Vehicle.LowVoltageBattery.CurrentVoltage: Current Voltage of the low voltage battery.
// Unit: 'V'
func ToLowVoltageBatteryCurrentVoltage0(originalDoc []byte, val string) (float64, error) {
	mV, err := ignoreZero(Convert29(val))
	if err != nil {
		return 0, err
	}

	return mV / 1000, nil
}

// ToOBDDistanceWithMIL0 converts data from field 'signals.102' of type string to 'Vehicle.OBD.DistanceWithMIL' of type float64.
// Vehicle.OBD.DistanceWithMIL: PID 21 - Distance traveled with MIL on
// Unit: 'km'
func ToOBDDistanceWithMIL0(originalDoc []byte, val string) (float64, error) {
	return Convert102(val)
}

// ToOBDRunTime0 converts data from field 'signals.107' of type string to 'Vehicle.OBD.RunTime' of type float64.
// Vehicle.OBD.RunTime: PID 1F - Engine run time
// Unit: 's'
func ToOBDRunTime0(originalDoc []byte, val string) (float64, error) {
	return ignoreZero(Convert107(val))
}

// ToPowertrainCombustionEngineDieselExhaustFluidCapacity0 converts data from field 'signals.1148' of type string to 'Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity' of type float64.
// Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity: Capacity in liters of the Diesel Exhaust Fluid Tank.
// Unit: 'l'
func ToPowertrainCombustionEngineDieselExhaustFluidCapacity0(originalDoc []byte, val string) (float64, error) {
	return Convert1148(val)
}

// ToPowertrainCombustionEngineDieselExhaustFluidCapacity1 converts data from field 'signals.1149' of type string to 'Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity' of type float64.
// Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Capacity: Capacity in liters of the Diesel Exhaust Fluid Tank.
// Unit: 'l'
func ToPowertrainCombustionEngineDieselExhaustFluidCapacity1(originalDoc []byte, val string) (float64, error) {
	return ignoreZero(Convert1149(val))
}

// ToPowertrainCombustionEngineDieselExhaustFluidLevel0 converts data from field 'signals.1150' of type string to 'Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level' of type float64.
// Vehicle.Powertrain.CombustionEngine.DieselExhaustFluid.Level: Level of the Diesel Exhaust Fluid tank as percent of capacity. 0 = empty. 100 = full.
// Unit: 'percent' Min: '0' Max: '100'
func ToPowertrainCombustionEngineDieselExhaustFluidLevel0(originalDoc []byte, val string) (float64, error) {
	return Convert1150(val)
}

// ToPowertrainCombustionEngineECT0 converts data from field 'signals.96' of type string to 'Vehicle.Powertrain.CombustionEngine.ECT' of type float64.
// Vehicle.Powertrain.CombustionEngine.ECT: Engine coolant temperature.
// Unit: 'celsius'
func ToPowertrainCombustionEngineECT0(originalDoc []byte, val string) (float64, error) {
	return Convert96(val)
}

// ToPowertrainCombustionEngineEngineOilLevel0 converts data from field 'signals.964' of type string to 'Vehicle.Powertrain.CombustionEngine.EngineOilLevel' of type string.
// Vehicle.Powertrain.CombustionEngine.EngineOilLevel: Engine oil level.
func ToPowertrainCombustionEngineEngineOilLevel0(originalDoc []byte, val string) (string, error) {
	num, err := Convert964(val)
	if err != nil {
		return "", err
	}
	switch {
	case num < 0.25:
		return "CRITICALLY_LOW", nil
	case num < 0.5:
		return "LOW", nil
	case num < 0.75:
		return "NORMAL", nil
	case num < .99:
		return "HIGH", nil
	default:
		return "CRITICALLY_HIGH", nil
	}
}

// ToPowertrainCombustionEngineEngineOilRelativeLevel0 converts data from field 'signals.964' of type string to 'Vehicle.Powertrain.CombustionEngine.EngineOilRelativeLevel' of type float64.
// Vehicle.Powertrain.CombustionEngine.EngineOilRelativeLevel: Engine oil level as a percentage.
// Unit: 'percent' Min: '0' Max: '100'
func ToPowertrainCombustionEngineEngineOilRelativeLevel0(originalDoc []byte, val string) (float64, error) {
	return Convert964(val)
}

// ToPowertrainCombustionEngineSpeed0 converts data from field 'signals.94' of type string to 'Vehicle.Powertrain.CombustionEngine.Speed' of type float64.
// Vehicle.Powertrain.CombustionEngine.Speed: Engine speed measured as rotations per minute.
// Unit: 'rpm'
func ToPowertrainCombustionEngineSpeed0(originalDoc []byte, val string) (float64, error) {
	return ignoreZero(Convert94(val))
}

// ToPowertrainCombustionEngineTPS0 converts data from field 'signals.103' of type string to 'Vehicle.Powertrain.CombustionEngine.TPS' of type float64.
// Vehicle.Powertrain.CombustionEngine.TPS: Current throttle position.
// Unit: 'percent'  Max: '100'
func ToPowertrainCombustionEngineTPS0(originalDoc []byte, val string) (float64, error) {
	if ignitionOff(originalDoc) {
		return ignoreZero(Convert103(val))
	}
	return Convert103(val)
}

// ToPowertrainFuelSystemAbsoluteLevel0 converts data from field 'signals.642' of type string to 'Vehicle.Powertrain.FuelSystem.AbsoluteLevel' of type float64.
// Vehicle.Powertrain.FuelSystem.AbsoluteLevel: Current available fuel in the fuel tank expressed in liters.
// Unit: 'l'
func ToPowertrainFuelSystemAbsoluteLevel0(originalDoc []byte, val string) (float64, error) {
	return Convert642(val)
}

// ToPowertrainFuelSystemAbsoluteLevel1 converts data from field 'signals.205' of type string to 'Vehicle.Powertrain.FuelSystem.AbsoluteLevel' of type float64.
// Vehicle.Powertrain.FuelSystem.AbsoluteLevel: Current available fuel in the fuel tank expressed in liters.
// Unit: 'l'
func ToPowertrainFuelSystemAbsoluteLevel1(originalDoc []byte, val string) (float64, error) {
	return ignoreZero(Convert205(val))
}

// ToPowertrainFuelSystemRelativeLevel0 converts data from field 'signals.98' of type string to 'Vehicle.Powertrain.FuelSystem.RelativeLevel' of type float64.
// Vehicle.Powertrain.FuelSystem.RelativeLevel: Level in fuel tank as percent of capacity. 0 = empty. 100 = full.
// Unit: 'percent' Min: '0' Max: '100'
func ToPowertrainFuelSystemRelativeLevel0(originalDoc []byte, val string) (float64, error) {
	return ignoreZero(Convert98(val))
}

// ToPowertrainFuelSystemRelativeLevel1 converts data from field 'signals.207' of type string to 'Vehicle.Powertrain.FuelSystem.RelativeLevel' of type float64.
// Vehicle.Powertrain.FuelSystem.RelativeLevel: Level in fuel tank as percent of capacity. 0 = empty. 100 = full.
// Unit: 'percent' Min: '0' Max: '100'
func ToPowertrainFuelSystemRelativeLevel1(originalDoc []byte, val string) (float64, error) {
	return ignoreZero(Convert207(val))
}

// ToPowertrainRange0 converts data from field 'signals.723' of type string to 'Vehicle.Powertrain.Range' of type float64.
// Vehicle.Powertrain.Range: Remaining range in meters using all energy sources available in the vehicle.
// Unit: 'm'
func ToPowertrainRange0(originalDoc []byte, val string) (float64, error) {
	floatValKm, err := Convert723(val)
	if err != nil {
		return 0, err
	}
	return floatValKm * 1000, nil
}

// ToPowertrainTractionBatteryStateOfChargeCurrent0 converts data from field 'signals.722' of type string to 'Vehicle.Powertrain.TractionBattery.StateOfCharge.Current' of type float64.
// Vehicle.Powertrain.TractionBattery.StateOfCharge.Current: Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.
// Unit: 'percent' Min: '0' Max: '100.0'
func ToPowertrainTractionBatteryStateOfChargeCurrent0(originalDoc []byte, val string) (float64, error) {
	return Convert722(val)
}

// ToPowertrainTransmissionTravelledDistance0 converts data from field 'signals.645' of type string to 'Vehicle.Powertrain.Transmission.TravelledDistance' of type float64.
// Vehicle.Powertrain.Transmission.TravelledDistance: Odometer reading, total distance travelled during the lifetime of the transmission.
// Unit: 'km'
func ToPowertrainTransmissionTravelledDistance0(originalDoc []byte, val string) (float64, error) {
	return Convert645(val)
}

// ToPowertrainTransmissionTravelledDistance1 converts data from field 'signals.114' of type string to 'Vehicle.Powertrain.Transmission.TravelledDistance' of type float64.
// Vehicle.Powertrain.Transmission.TravelledDistance: Odometer reading, total distance travelled during the lifetime of the transmission.
// Unit: 'km'
func ToPowertrainTransmissionTravelledDistance1(originalDoc []byte, val string) (float64, error) {
	num, err := ignoreZero(Convert114(val))
	if err != nil {
		return 0, err
	}
	// convert m to km
	return num / 1000, nil
}

// ToPowertrainType0 converts data from field 'signals.99' of type string to 'Vehicle.Powertrain.Type' of type string.
// Vehicle.Powertrain.Type: Defines the powertrain type of the vehicle.
func ToPowertrainType0(originalDoc []byte, val string) (string, error) {
	num, err := Convert99(val)
	if err != nil {
		return "", err
	}
	return fuelTypeConversion(num)
}

// ToPowertrainType1 converts data from field 'signals.483' of type string to 'Vehicle.Powertrain.Type' of type string.
// Vehicle.Powertrain.Type: Defines the powertrain type of the vehicle.
func ToPowertrainType1(originalDoc []byte, val string) (string, error) {
	num, err := Convert483(val)
	if err != nil {
		return "", err
	}
	return fuelTypeConversion(num)
}

// ToSpeed0 converts data from field 'signals.95' of type string to 'Vehicle.Speed' of type float64.
// Vehicle.Speed: Vehicle speed.
// Unit: 'km/h'
func ToSpeed0(originalDoc []byte, val string) (float64, error) {
	if ignitionOff(originalDoc) {
		return ignoreZero(Convert95(val))
	}
	return Convert95(val)
}

// ToSpeed1 converts data from field 'pos.spd' of type float64 to 'Vehicle.Speed' of type float64.
// Vehicle.Speed: Vehicle speed.
// Unit: 'km/h'
func ToSpeed1(originalDoc []byte, val float64) (float64, error) {
	if val == 0xffff {
		return 0, errNotFound
	}
	return val, nil
}
