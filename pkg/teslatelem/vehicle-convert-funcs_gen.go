// Code generated by github.com/DIMO-Network/model-garage.
package teslatelem

import "strconv"

// This file is automatically populated with conversion functions for each field of the model struct.
// any conversion functions already defined in this package will be coppied through.
// note: DO NOT mutate the orginalDoc parameter which is shared between all conversion functions.

// ToChassisAxleRow1WheelLeftTirePressure0 converts data from field 'TpmsPressureFl' of type *Value_StringValue to 'Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelLeftTirePressure0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	f, err := strconv.ParseFloat(val.StringValue, 64)
	if err != nil {
		return 0, err
	}
	return barsToKilopascals(f), nil
}

// ToChassisAxleRow1WheelRightTirePressure0 converts data from field 'TpmsPressureFr' of type *Value_StringValue to 'Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row1.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow1WheelRightTirePressure0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	f, err := strconv.ParseFloat(val.StringValue, 64)
	if err != nil {
		return 0, err
	}
	return barsToKilopascals(f), nil
}

// ToChassisAxleRow2WheelLeftTirePressure0 converts data from field 'TpmsPressureRl' of type *Value_StringValue to 'Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Left.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelLeftTirePressure0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	f, err := strconv.ParseFloat(val.StringValue, 64)
	if err != nil {
		return 0, err
	}
	return barsToKilopascals(f), nil
}

// ToChassisAxleRow2WheelRightTirePressure0 converts data from field 'TpmsPressureRr' of type *Value_StringValue to 'Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure' of type float64.
// Vehicle.Chassis.Axle.Row2.Wheel.Right.Tire.Pressure: Tire pressure in kilo-Pascal.
// Unit: 'kPa'
func ToChassisAxleRow2WheelRightTirePressure0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	f, err := strconv.ParseFloat(val.StringValue, 64)
	if err != nil {
		return 0, err
	}
	return barsToKilopascals(f), nil
}

// ToCurrentLocationLatitude0 converts data from field 'Location' of type *Value_LocationValue to 'Vehicle.CurrentLocation.Latitude' of type float64.
// Vehicle.CurrentLocation.Latitude: Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
// Unit: 'degrees' Min: '-90' Max: '90'
func ToCurrentLocationLatitude0(originalDoc []byte, val *Value_LocationValue) (float64, error) {
	return val.LocationValue.Latitude, nil
}

// ToCurrentLocationLongitude0 converts data from field 'Location' of type *Value_LocationValue to 'Vehicle.CurrentLocation.Longitude' of type float64.
// Vehicle.CurrentLocation.Longitude: Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
// Unit: 'degrees' Min: '-180' Max: '180'
func ToCurrentLocationLongitude0(originalDoc []byte, val *Value_LocationValue) (float64, error) {
	return val.LocationValue.Longitude, nil
}

// ToExteriorAirTemperature0 converts data from field 'OutsideTemp' of type *Value_StringValue to 'Vehicle.Exterior.AirTemperature' of type float64.
// Vehicle.Exterior.AirTemperature: Air temperature outside the vehicle.
// Unit: 'celsius'
func ToExteriorAirTemperature0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	f, err := strconv.ParseFloat(val.StringValue, 64)
	if err != nil {
		return 0, err
	}
	return f, nil
}

// ToPowertrainRange0 converts data from field 'EstBatteryRange' of type *Value_StringValue to 'Vehicle.Powertrain.Range' of type float64.
// Vehicle.Powertrain.Range: Remaining range in meters using all energy sources available in the vehicle.
// Unit: 'm'
func ToPowertrainRange0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	f, err := strconv.ParseFloat(val.StringValue, 64)
	if err != nil {
		return 0, err
	}
	return milesToKilometers(f), nil
}

// ToPowertrainTractionBatteryChargingAddedEnergy0 converts data from field 'ACChargingEnergyIn' of type *Value_StringValue to 'Vehicle.Powertrain.TractionBattery.Charging.AddedEnergy' of type float64.
// Vehicle.Powertrain.TractionBattery.Charging.AddedEnergy: Amount of charge added to the high voltage battery during the current charging session, expressed in kilowatt-hours.
// Unit: 'kWh'
func ToPowertrainTractionBatteryChargingAddedEnergy0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	panic("not implemented")
}

// ToPowertrainTractionBatteryChargingAddedEnergy1 converts data from field 'DCChargingEnergyIn' of type *Value_StringValue to 'Vehicle.Powertrain.TractionBattery.Charging.AddedEnergy' of type float64.
// Vehicle.Powertrain.TractionBattery.Charging.AddedEnergy: Amount of charge added to the high voltage battery during the current charging session, expressed in kilowatt-hours.
// Unit: 'kWh'
func ToPowertrainTractionBatteryChargingAddedEnergy1(originalDoc []byte, val *Value_StringValue) (float64, error) {
	panic("not implemented")
}

// ToPowertrainTractionBatteryChargingChargeLimit0 converts data from field 'ChargeLimitSoc' of type *Value_StringValue to 'Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit' of type float64.
// Vehicle.Powertrain.TractionBattery.Charging.ChargeLimit: Target charge limit (state of charge) for battery.
// Unit: 'percent' Min: '0' Max: '100'
func ToPowertrainTractionBatteryChargingChargeLimit0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	panic("not implemented")
}

// ToPowertrainTractionBatteryChargingIsCharging0 converts data from field 'ChargeState' of type *Value_StringValue to 'Vehicle.Powertrain.TractionBattery.Charging.IsCharging' of type float64.
// Vehicle.Powertrain.TractionBattery.Charging.IsCharging: True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle.
func ToPowertrainTractionBatteryChargingIsCharging0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	panic("not implemented")
}

// ToPowertrainTractionBatteryCurrentPower0 converts data from field 'ACChargingPower' of type *Value_StringValue to 'Vehicle.Powertrain.TractionBattery.CurrentPower' of type float64.
// Vehicle.Powertrain.TractionBattery.CurrentPower: Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging. Negative = Energy flowing out of battery, e.g. during driving.
// Unit: 'W'
func ToPowertrainTractionBatteryCurrentPower0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	panic("not implemented")
}

// ToPowertrainTractionBatteryCurrentPower1 converts data from field 'DCChargingPower' of type *Value_StringValue to 'Vehicle.Powertrain.TractionBattery.CurrentPower' of type float64.
// Vehicle.Powertrain.TractionBattery.CurrentPower: Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging. Negative = Energy flowing out of battery, e.g. during driving.
// Unit: 'W'
func ToPowertrainTractionBatteryCurrentPower1(originalDoc []byte, val *Value_StringValue) (float64, error) {
	panic("not implemented")
}

// ToPowertrainTractionBatteryStateOfChargeCurrent0 converts data from field 'Soc' of type *Value_StringValue to 'Vehicle.Powertrain.TractionBattery.StateOfCharge.Current' of type float64.
// Vehicle.Powertrain.TractionBattery.StateOfCharge.Current: Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.
// Unit: 'percent' Min: '0' Max: '100.0'
func ToPowertrainTractionBatteryStateOfChargeCurrent0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	panic("not implemented")
}

// ToPowertrainTransmissionTravelledDistance0 converts data from field 'Odometer' of type *Value_StringValue to 'Vehicle.Powertrain.Transmission.TravelledDistance' of type float64.
// Vehicle.Powertrain.Transmission.TravelledDistance: Odometer reading, total distance travelled during the lifetime of the transmission.
// Unit: 'km'
func ToPowertrainTransmissionTravelledDistance0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	panic("not implemented")
}

// ToSpeed0 converts data from field 'VehicleSpeed' of type *Value_StringValue to 'Vehicle.Speed' of type float64.
// Vehicle.Speed: Vehicle speed.
// Unit: 'km/h'
func ToSpeed0(originalDoc []byte, val *Value_StringValue) (float64, error) {
	panic("not implemented")
}
