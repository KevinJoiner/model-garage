// Code generated by github.com/DIMO-Network/model-garage DO NOT EDIT.
package tesla

var errNotFound = errors.New("field not found")

// SignalsFromV1Data creates a slice of vss.SignalValue from the given v1 status JSON data.
// On error, partial results may be returned.
func SignalsFromTesla(jsonData []byte) ([]vss.SignalValue, []error) {
	var retSignals []vss.SignalValue
{{ $first := true -}}
{{- $root := . }}
{{- range $idx, $sig := .Signals }}
	{{ if eq (len $sig.Conversions) 0 }} {{ continue }} {{ end -}}
	{{ if $first -}}
	var val any
	var ts time.Time
	var err error
	var errs []error
	{{ $first = false }} {{ end }}

	val, ts, err = {{ $sig.GOName }}FromTesla(jsonData)
	if err != nil {
		if !errors.Is(err, errNotFound) {
			errs = append(errs, fmt.Errorf("failed to convert '{{ $sig.GOName }}': %w", err))
		}
	} else {
		sig := vss.SignalValue{
			Name: "{{ $sig.JSONName }}",
			Timestamp: ts,
		}
		sig.SetValue(val)
		retSignals = append(retSignals, sig)
	}
{{- end }}
	return retSignals, errs
}

var zeroTime time.Time

{{- range $i, $sig := .Signals }}
// {{ $sig.GOName }}FromTesla converts the given JSON data to a {{ $sig.GOType }}.
func {{ $sig.GOName }}FromTesla(jsonData []byte) (ret {{ $sig.GOType }}, ts time.Time, err error) {
    var errs error
    var result gjson.Result

	{{- range $j, $conv := .Conversions }}
    result = gjson.GetBytes(jsonData, "data.{{ $conv.OriginalName }}")
    if result.Exists() && result.Value() != nil {
        val, ok := result.Value().({{ $conv.OriginalType }})
        if ok {
            retVal, err := To{{ $sig.GOName }}{{ $j }}(jsonData, val)
            if err == nil {
				endpoint, _, _ := strings.Cut("{{ $conv.OriginalName }}", ".")
				result := gjson.GetBytes(jsonData, "data." + endpoint + ".timestamp")

				if result.Exists() && result.Type == gjson.Number {
					ts := time.UnixMilli(result.Int())
					return retVal, ts, nil
				}

				errs = errors.Join(errs, fmt.Errorf("couldn't find a timestamp for 'data.{{ $conv.OriginalName }}'"))
            }
            errs = errors.Join(errs, fmt.Errorf("failed to convert 'data.{{ $conv.OriginalName }}': %w", err))
        } else {
            errs = errors.Join(errs, fmt.Errorf("%w, field 'data.{{ $conv.OriginalName }}' is not of type '{{ $conv.OriginalType }}' got '%v' of type '%T'",  convert.InvalidTypeError(), result.Value(), result.Value()))
        }
    }
	{{- end }}
	
	if errs == nil {
		return ret, zeroTime, fmt.Errorf("%w '{{ $sig.GOName }}'", errNotFound)
	}

    return ret, zeroTime, errs
}
{{- end }}
